package clinic;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collector;
import java.util.stream.Stream;

import static java.util.stream.Collectors.*;
import static java.util.Comparator.*;



public class Clinic {

	private Map<String, Person> patients = new HashMap<>();
	private Map<Integer, Doctor> doctors = new HashMap<>();
	
	public void addPatient(String first, String last, String ssn) {
		Person pp = new Person (ssn, first, last);
		patients.put(ssn, pp);
	}

	public void addDoctor(String first, String last, String ssn, int docID, String specialization) {
		Doctor dd = new Doctor (ssn, first, last, docID, specialization);
		doctors.put(docID, dd);
	}

	public Person getPatient(String ssn) throws NoSuchPatient {
		
		if (!patients.containsKey(ssn)){
			throw new NoSuchPatient();
		}
		
		return patients.get(ssn);
	}

	public Doctor getDoctor(int docID) throws NoSuchDoctor {
		
		if (!doctors.containsKey(docID)){
			throw new NoSuchDoctor();
		}
		
		return doctors.get(docID);
	}
	
	public void assignPatientToDoctor(String ssn, int docID) throws NoSuchPatient, NoSuchDoctor {
			getPatient(ssn).setDoctor(getDoctor(docID));
			getDoctor(docID).addPatient(getPatient(ssn));
	}
	
	/**
	 * returns the collection of doctors that have no patient at all, sorted in alphabetic order.
	 */
	public Collection<Doctor> idleDoctors(){
		return doctors.values().stream()
		.filter(d -> d.getPatients().size() == 0)
		.sorted (comparing(Doctor::getLast))
		.collect(toList());
	}

	/**
	 * returns the collection of doctors that a number of patients larger than the average.
	 */
	public Collection<Doctor> busyDoctors(){
			
		int nPatients = doctors.values().stream()
		//int average = Stream.of(doctors.values())
				.mapToInt( doctor -> new Integer (doctor.getPatients().size()) )
				.reduce(0, (a,b) -> a+b);
		int nDoctors = doctors.size();
		
		int average = nPatients / nDoctors;
		
		return doctors.values().stream().filter(d -> d.getPatients().size() > average)
				.collect(toList());
	}

	
	/**
	 * returns list of strings
	 * containing the name of the doctor and the relative number of patients
	 * with the relative number of patients, sorted by decreasing number.<br>
	 * The string must be formatted as "<i>### : ID SURNAME NAME</i>" where <i>###</i>
	 * represent the number of patients (printed on three characters).
	 */
	Collection<String> doctorsByNumPatients(){
		return null;
	}
	
	/**
	 * computes the number of
	 * patients per (their doctor's) specialization.
	 * The elements are sorted first by decreasing count and then by alphabetic specialization.<br>
	 * The strings are structured as "<i>### - SPECIALITY</i>" where <i>###</i>
	 * represent the number of patients (printed on three characters).
	 */
	public Collection<String> countPatientsPerSpecialization(){
		return null;
	}
	
	public void loadData(String path) throws IOException {
		try { 
			BufferedReader in = new BufferedReader ( new FileReader (path) );
			Pattern csv;
			Matcher csvMatcher;
			String line;
			while ( (line = in.readLine()) != null){
				csv = Pattern.compile("(P|M);?([0-9])?;([A-Z]+);([A-Z]+);([0-9]+);?([A-Z]+)?");
				csvMatcher = csv.matcher(line);
					
				while (csvMatcher.find()) {
					System.out.println("Element: " + csvMatcher.group(1));
					
					if (csvMatcher.group(1).equals("P")){
						//System.out.println("Inside");
						this.addPatient(csvMatcher.group(3), csvMatcher.group(4), csvMatcher.group(5));
					} else {
						this.addDoctor(csvMatcher.group(3), csvMatcher.group(4), csvMatcher.group(5), 
								new Integer (csvMatcher.group(2)), csvMatcher.group(6));
					}
						
				} // end regex while
				
			} // end read while
			in.close();
		} catch (IOException e){
			System.out.println(e.getMessage());
		} // end catch
		
	} // end function

	public Collection<Person> getPatients() {
		return patients.values();
	}

	public Collection<Doctor> getDoctors() {
		return doctors.values();
	}


}
