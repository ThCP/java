package it.polito.db;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.LinkedList;
import java.util.List;

public class DB {
	
	/* conn needs to store connection to the database */
	private Connection conn;
	
	
	/*
	 * Constructor
	 */
	public DB() throws ClassNotFoundException {
		/* driver registration */
		/* Remember that the class that implements the JDBC Driver for oracle is 
		 * oracle.jdbc.driver.OracleDriver */

		/* write necessary code to instantiate/register 
		 * the Oracle driver */
		Class.forName("org.sqlite.JDBC");
		/* end driver registration */
	}
	
	
	/*
	 * Method that open connection to the database.
	 * returns true if connection is correctly open, false otherwise.
	 */
	public boolean OpenConnection(){
		try{
			/* Open connection and store in conn variable 
			 * conn= ..... */

			conn = DriverManager.getConnection("jdbc:sqlite:databases.db");
			conn.setAutoCommit(false);
			return true;
			
		} catch(Exception ex){
			ex.printStackTrace();
			
			return false;
		}

	}
	

	
	/*
	 * This method receives as an input parameter the code of a client and returns 
	 * the data of this client as a string. The returned string by the method 
	 * is generated by concatenating the names of the client attributes and the values 
	 * of those attributes. For example, if the selected client has “Poul”, surname “White”,
	 * address “Street Inesistente 24, Turin” and mobile number “3933570222”
	 * then the method returns the string: 
	 * “Name: Poul\nSurname: White\nAddress: Street Inesistente 24, Turin\nCell: 3933570222”
	 */
	public String getDataClient(long cod_client) throws SQLException {
		
		Statement statement = conn.createStatement();
		String query = "SELECT Name, Surname, Address, Cell FROM CLIENT WHERE CodClient = " + cod_client + ";";
		ResultSet result = statement.executeQuery(query);
		String data=null;
		boolean clientExist= result.next();

		try {

			/* Run the query to retrieve information about the client
			 * with the identification code equal to cod_client */
			
			/* If client exists return string with its data.
			 * Otherwise a string with the string: "Client does not exist" */
			if (clientExist==true)
			{
				/* Modify this portion of code in order to return information of the client 
				 * obtained with the query.
				 * Use the same format of this example for the returning string.
				 * Pay attention to client without mobile number (the field is a NULL type)*/
				
				String name = result.getString("Name");
				String surname = result.getString("Surname");
				String address = result.getString("Address");
				String cell = result.getString("Cell");
				
				data = new String ("Name: " + name + "\nSurname: " + surname + 
									"\nAddress: " + address + "\nCell: " + cell);
			}
			else
			{
				/* If client does not exist return this string */
				data=new String("Client does not exist");
			}

			
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
		
		result.close();
		return data;
		
	}
	
	
	
	/*
	 * This method returns a list of strings. Each string contains the
	 * name of one of the course. The list represents the courses in
	 * which the client is enrolled with the identification code
	 * equal to cod_client.
	 */
	public List<String> getCourseClient(long cod_client) throws SQLException {
		List<String> list=new LinkedList<String>();
		Statement statement = conn.createStatement();
		String query = "SELECT NameC FROM ENROLLED E, COURSE C WHERE E.CodCourse = C.CodCourse AND E.CodClient = " + cod_client + ";";

		ResultSet result = statement.executeQuery(query);
		
		try {
			
			/* Insert the code that accesses to the database 
			 * and retrieves the names of the courses in 
			 * which cod_client is enrolled .
			 * Insert the name in the list of string
			 * (each string of the list is a course name) 
			 * */

			while (result.next()) {
				list.add(result.getString("NameC"));
			}
			

		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
		result.close();
		return list;
	}
	
	
	
	/*
	 * This method returns a list of courses codes and names for which there
	 * is at least one empty seat.
	 */
	public List<String> getCodCourses() throws SQLException {
		List<String> list=new LinkedList<String>();
		Statement statement = conn.createStatement();
		String query = "SELECT CodCourse, NameC FROM COURSE WHERE AvailableSeats > 0;";
		ResultSet result = statement.executeQuery(query);

		try {
			/* Insert the code that queries code and name for the courses
			 * that have the AvailableSeats attribute greater than or equal to 1).
			 * Insert in the list a string for each course retrieved from the query. 
			 * */
			
			/* Example that returns always the same courses (pay attention 
			 * to the used format: "cod_course - name_course")*/
			
			while (result.next()){
				list.add(result.getString("CodCourse") + " - " + result.getString("NameC"));
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
		
		result.close();
		return list;
	}
	
	
	
	/*
	 * This method receives as input parameters the code of a course and the code of a client 
	 * and it enrolls the client in the course (it inserts a new enrollment in the database). 
	 * Enrollment is the insertion of the new tuple in the Enrolled table
 	 * 
 	 * Then, the method has to modify (decreasing it by one) the value of the available seats  
 	 * for the course with the codCourse.
	 * 
	 * The method returns true if the registration was successful, false otherwise.
	 */
	public boolean addEnroll(long codCourse, long codClient){
		try {
			    /* Insert the code for: 
			     * 1 - insert the new tuple in the Enrolled table, with codClient and codCourse.  
			     * 2 - update the number of the available seats (course.AvailableSeats)
			     *     for the course with codCourse.
			     *     
			     * Pay attention because both operations have to finish correctly, 
			     * or have to cancel both operations if one of them fails (look 
			     * at the slide on managing transactions in JDBC)
			     * */ 
			
			Statement statement = conn.createStatement();
			GregorianCalendar gc = new GregorianCalendar();
			
			int dd = gc.get(Calendar.DAY_OF_MONTH);
			int mm = gc.get(Calendar.MONTH);
			int yy = gc.get(Calendar.YEAR);
			
			String query = "INSERT INTO ENROLLED (CodClient, CodCourse, EnrollDate) VALUES ('" + codClient+ "', '" + codCourse + "','"+dd+"/"+mm+"/"+yy+"' );";

			int result = statement.executeUpdate(query);
			
			if (result == 0) {
				conn.rollback();
				return false;
			}

			query = "UPDATE Course SET AvailableSeats = AvailableSeats - 1 WHERE CodCourse = " + codCourse + ";";
			result = statement.executeUpdate(query);
			if (result == 0) {
				conn.rollback();
				return false;
			}
			
			
			conn.commit();
			return true;
		} catch (Exception e) {
				e.printStackTrace();
				return false;
		}
		
	}
	
	
	/*
	 * This method closes the connection to the database.
	 */
	public void CloseConnection(){
		try {
			conn.close();
		} catch (Exception e) {
			System.err.println("Error in closing the connection with the DB!");
		}
	}
}
